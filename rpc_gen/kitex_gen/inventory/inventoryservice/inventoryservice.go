// Code generated by Kitex v0.9.1. DO NOT EDIT.

package inventoryservice

import (
	"context"
	"errors"
	inventory "github.com/Yzc216/gomall/rpc_gen/kitex_gen/inventory"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"QueryStock": kitex.NewMethodInfo(
		queryStockHandler,
		newQueryStockArgs,
		newQueryStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ReserveStock": kitex.NewMethodInfo(
		reserveStockHandler,
		newReserveStockArgs,
		newReserveStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ConfirmStock": kitex.NewMethodInfo(
		confirmStockHandler,
		newConfirmStockArgs,
		newConfirmStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ReleaseStock": kitex.NewMethodInfo(
		releaseStockHandler,
		newReleaseStockArgs,
		newReleaseStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	inventoryServiceServiceInfo                = NewServiceInfo()
	inventoryServiceServiceInfoForClient       = NewServiceInfoForClient()
	inventoryServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return inventoryServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return inventoryServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return inventoryServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "InventoryService"
	handlerType := (*inventory.InventoryService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "inventory",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func queryStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(inventory.QueryStockReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(inventory.InventoryService).QueryStock(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *QueryStockArgs:
		success, err := handler.(inventory.InventoryService).QueryStock(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*QueryStockResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newQueryStockArgs() interface{} {
	return &QueryStockArgs{}
}

func newQueryStockResult() interface{} {
	return &QueryStockResult{}
}

type QueryStockArgs struct {
	Req *inventory.QueryStockReq
}

func (p *QueryStockArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(inventory.QueryStockReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *QueryStockArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *QueryStockArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *QueryStockArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *QueryStockArgs) Unmarshal(in []byte) error {
	msg := new(inventory.QueryStockReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var QueryStockArgs_Req_DEFAULT *inventory.QueryStockReq

func (p *QueryStockArgs) GetReq() *inventory.QueryStockReq {
	if !p.IsSetReq() {
		return QueryStockArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QueryStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *QueryStockArgs) GetFirstArgument() interface{} {
	return p.Req
}

type QueryStockResult struct {
	Success *inventory.QueryStockResp
}

var QueryStockResult_Success_DEFAULT *inventory.QueryStockResp

func (p *QueryStockResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(inventory.QueryStockResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *QueryStockResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *QueryStockResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *QueryStockResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *QueryStockResult) Unmarshal(in []byte) error {
	msg := new(inventory.QueryStockResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QueryStockResult) GetSuccess() *inventory.QueryStockResp {
	if !p.IsSetSuccess() {
		return QueryStockResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QueryStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*inventory.QueryStockResp)
}

func (p *QueryStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryStockResult) GetResult() interface{} {
	return p.Success
}

func reserveStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(inventory.InventoryReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(inventory.InventoryService).ReserveStock(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ReserveStockArgs:
		success, err := handler.(inventory.InventoryService).ReserveStock(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ReserveStockResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newReserveStockArgs() interface{} {
	return &ReserveStockArgs{}
}

func newReserveStockResult() interface{} {
	return &ReserveStockResult{}
}

type ReserveStockArgs struct {
	Req *inventory.InventoryReq
}

func (p *ReserveStockArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(inventory.InventoryReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ReserveStockArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ReserveStockArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ReserveStockArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ReserveStockArgs) Unmarshal(in []byte) error {
	msg := new(inventory.InventoryReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ReserveStockArgs_Req_DEFAULT *inventory.InventoryReq

func (p *ReserveStockArgs) GetReq() *inventory.InventoryReq {
	if !p.IsSetReq() {
		return ReserveStockArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ReserveStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ReserveStockArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ReserveStockResult struct {
	Success *inventory.InventoryResp
}

var ReserveStockResult_Success_DEFAULT *inventory.InventoryResp

func (p *ReserveStockResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(inventory.InventoryResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ReserveStockResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ReserveStockResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ReserveStockResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ReserveStockResult) Unmarshal(in []byte) error {
	msg := new(inventory.InventoryResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ReserveStockResult) GetSuccess() *inventory.InventoryResp {
	if !p.IsSetSuccess() {
		return ReserveStockResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ReserveStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*inventory.InventoryResp)
}

func (p *ReserveStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ReserveStockResult) GetResult() interface{} {
	return p.Success
}

func confirmStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(inventory.InventoryReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(inventory.InventoryService).ConfirmStock(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ConfirmStockArgs:
		success, err := handler.(inventory.InventoryService).ConfirmStock(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ConfirmStockResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newConfirmStockArgs() interface{} {
	return &ConfirmStockArgs{}
}

func newConfirmStockResult() interface{} {
	return &ConfirmStockResult{}
}

type ConfirmStockArgs struct {
	Req *inventory.InventoryReq
}

func (p *ConfirmStockArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(inventory.InventoryReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ConfirmStockArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ConfirmStockArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ConfirmStockArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ConfirmStockArgs) Unmarshal(in []byte) error {
	msg := new(inventory.InventoryReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ConfirmStockArgs_Req_DEFAULT *inventory.InventoryReq

func (p *ConfirmStockArgs) GetReq() *inventory.InventoryReq {
	if !p.IsSetReq() {
		return ConfirmStockArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ConfirmStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ConfirmStockArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ConfirmStockResult struct {
	Success *inventory.InventoryResp
}

var ConfirmStockResult_Success_DEFAULT *inventory.InventoryResp

func (p *ConfirmStockResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(inventory.InventoryResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ConfirmStockResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ConfirmStockResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ConfirmStockResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ConfirmStockResult) Unmarshal(in []byte) error {
	msg := new(inventory.InventoryResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ConfirmStockResult) GetSuccess() *inventory.InventoryResp {
	if !p.IsSetSuccess() {
		return ConfirmStockResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ConfirmStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*inventory.InventoryResp)
}

func (p *ConfirmStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ConfirmStockResult) GetResult() interface{} {
	return p.Success
}

func releaseStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(inventory.InventoryReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(inventory.InventoryService).ReleaseStock(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ReleaseStockArgs:
		success, err := handler.(inventory.InventoryService).ReleaseStock(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ReleaseStockResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newReleaseStockArgs() interface{} {
	return &ReleaseStockArgs{}
}

func newReleaseStockResult() interface{} {
	return &ReleaseStockResult{}
}

type ReleaseStockArgs struct {
	Req *inventory.InventoryReq
}

func (p *ReleaseStockArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(inventory.InventoryReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ReleaseStockArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ReleaseStockArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ReleaseStockArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ReleaseStockArgs) Unmarshal(in []byte) error {
	msg := new(inventory.InventoryReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ReleaseStockArgs_Req_DEFAULT *inventory.InventoryReq

func (p *ReleaseStockArgs) GetReq() *inventory.InventoryReq {
	if !p.IsSetReq() {
		return ReleaseStockArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ReleaseStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ReleaseStockArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ReleaseStockResult struct {
	Success *inventory.InventoryResp
}

var ReleaseStockResult_Success_DEFAULT *inventory.InventoryResp

func (p *ReleaseStockResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(inventory.InventoryResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ReleaseStockResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ReleaseStockResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ReleaseStockResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ReleaseStockResult) Unmarshal(in []byte) error {
	msg := new(inventory.InventoryResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ReleaseStockResult) GetSuccess() *inventory.InventoryResp {
	if !p.IsSetSuccess() {
		return ReleaseStockResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ReleaseStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*inventory.InventoryResp)
}

func (p *ReleaseStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ReleaseStockResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) QueryStock(ctx context.Context, Req *inventory.QueryStockReq) (r *inventory.QueryStockResp, err error) {
	var _args QueryStockArgs
	_args.Req = Req
	var _result QueryStockResult
	if err = p.c.Call(ctx, "QueryStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ReserveStock(ctx context.Context, Req *inventory.InventoryReq) (r *inventory.InventoryResp, err error) {
	var _args ReserveStockArgs
	_args.Req = Req
	var _result ReserveStockResult
	if err = p.c.Call(ctx, "ReserveStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ConfirmStock(ctx context.Context, Req *inventory.InventoryReq) (r *inventory.InventoryResp, err error) {
	var _args ConfirmStockArgs
	_args.Req = Req
	var _result ConfirmStockResult
	if err = p.c.Call(ctx, "ConfirmStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ReleaseStock(ctx context.Context, Req *inventory.InventoryReq) (r *inventory.InventoryResp, err error) {
	var _args ReleaseStockArgs
	_args.Req = Req
	var _result ReleaseStockResult
	if err = p.c.Call(ctx, "ReleaseStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
